#! /bin/bash

# Copyright (C) 2009-2013 Typesafe Inc. <http://www.typesafe.com>

unset no_publish

# comma-separated list of scala versions to cross build against
declare crossbuild="2.11.1"

# process arguments
declare -a args
while [[ $# -gt 0 ]] ; do
  case "$1" in
    --no-publish) no_publish=1; shift ;;
    -c|--crossbuild) crossbuild=$2; shift 2;;
    *) args=("${args[@]}" "$1"); shift ;;
  esac
done
set -- "${args[@]}" # reset "$@"

set -e
export CURRENT=`pwd`
export SCRIPT=`dirname "$0"`

cd "$SCRIPT"
export BUILD=`pwd`/build

if [ -n "$no_publish" ] ; then
  echo "[info] Not publishing locally"
else
  echo "[info] Play will build with its default version of Scala and also cross build against these versions: <${crossbuild}>"
  echo "[info]"
  echo "[info] ---- BUILDING PLAY (with its default version of Scala)"
  echo "[info]"
  $BUILD "$@" publish-local
  for v in ${crossbuild//,/ } ; do
    echo "[info]"
    echo "[info] ---- BUILDING PLAY (cross building against Scala $v)"
    echo "[info]"
    $BUILD "$@" -Dscala.version=$v publish-local
  done
fi

echo "[info]"
echo "[info] ---- PLAYFRAMEWORK CORE TEST RUNNER"
echo "[info]"

$BUILD "$@" test:test

echo "[info]"
echo "[info] ---- CHECKING BINARY COMPATIBILITY"
echo "[info]"

./build "$@" mima-report-binary-issues

echo "[info]"
echo "[info] ---- SBT PLUGIN TESTS"
echo "[info]"

$BUILD "$@" Sbt-Plugin:scripted

rm -rf ./logs

cd ./test/integrationtest

echo "[info]"
echo "[info] ---- RUNNING INTEGRATION TEST"
echo "[info]"

$BUILD "$@" clean test

cd $CURRENT

cd ./test/integrationtest-java

echo "[info]"
echo "[info] ---- RUNNING JAVA INTEGRATION TEST"
echo "[info]"

$BUILD "$@" clean test
if [ ! -f target/junit-running ]
then
  echo "[Error]"
  echo "[Error] ---- Junit tests might not be running"
  echo "[Error]"
  exit 1
fi


cd $CURRENT

cd ./test/integrationtest-scala

echo "[info]"
echo "[info] ---- RUNNING SCALA INTEGRATION TEST"
echo "[info]"

$BUILD "$@" clean test
cd $CURRENT

echo "[info]"
echo "[info] ---- RUNNING DOCUMENTATION TESTS"
echo "[info]"

cd ../documentation
$BUILD "$@" clean test validate-docs
cd $CURRENT

echo "[info]"
echo "[info] ---- TESTING TEMPLATES"
echo "[info]"

cd ../templates
$BUILD "$@" testTemplates
cd $CURRENT

echo "[info]"
echo "[info] ---- TESTING SAMPLE APPLICATIONS"
echo "[info]"

x=`find ../samples -name app`
for i in $(echo $x | tr ";" "\n")
do
  echo "[info]"
  echo "[info] ---- TESTING ${i/app/}"
  echo "[info]"
  cd ${i/app/}
  $BUILD "$@" clean test
  cd $CURRENT
done

echo "[info]"
echo "[info] ALL TESTS PASSED"
echo "[info]"
